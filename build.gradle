import net.ltgt.gradle.errorprone.CheckSeverity

buildscript {
  ext.versions = [
      'dagger': '2.33',
      'kotlin': '1.4.20',
      'incap': '0.2',
      'androidTools': '26.4.1',
  ]

  ext.deps = [
      'dagger': [
          'runtime': "com.google.dagger:dagger:${versions.dagger}",
          'compiler': "com.google.dagger:dagger-compiler:${versions.dagger}",
          'androidRuntime': "com.google.dagger:dagger-android:${versions.dagger}",
          'androidRuntimeJar': "com.google.dagger:dagger-android-jarimpl:${versions.dagger}",
          'androidCompiler': "com.google.dagger:dagger-android-processor:${versions.dagger}",
      ],
      'kotlin': [
          'gradle': "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
      ],
      'junit': 'junit:junit:4.13',
      'truth': 'com.google.truth.extensions:truth-java8-extension:1.0',
      'compileTesting': 'com.google.testing.compile:compile-testing:0.18',
      'javaPoet': 'com.squareup:javapoet:1.11.1',
      'auto': [
          'service': [
              'annotations': 'com.google.auto.service:auto-service-annotations:1.0-rc5',
              'compiler': 'com.google.auto.service:auto-service:1.0-rc5',
          ],
          'factory': 'com.google.auto.factory:auto-factory:1.0-beta6',
          'value': [
              'annotations': 'com.google.auto.value:auto-value-annotations:1.6.5',
              'compiler': 'com.google.auto.value:auto-value:1.6.5',
          ],
      ],
      'jetbrainsAnnotations': 'org.jetbrains:annotations:17.0.0',
      'guava': 'com.google.guava:guava:28.0-jre',
      'animalSnifferAnnotations': 'org.codehaus.mojo:animal-sniffer-annotations:1.18',
      'robolectric': 'org.robolectric:robolectric:4.4',
      'androidx': [
          'test': [
              'core': 'androidx.test:core:1.2.0',
          ],
      ],
      'lint': [
          'core': "com.android.tools.lint:lint:${versions.androidTools}",
          'api': "com.android.tools.lint:lint-api:${versions.androidTools}",
          'checks': "com.android.tools.lint:lint-checks:${versions.androidTools}",
          'tests': "com.android.tools.lint:lint-tests:${versions.androidTools}",
      ],
      'incap': [
          'runtime': "net.ltgt.gradle.incap:incap:${versions.incap}",
          'processor': "net.ltgt.gradle.incap:incap-processor:${versions.incap}",
      ]
  ]

  repositories {
    mavenCentral()
    google()
    gradlePluginPortal()
  }

  dependencies {
    classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.8.1'
    classpath 'net.ltgt.gradle:gradle-nullaway-plugin:0.3'
    classpath 'ru.vyarus:gradle-animalsniffer-plugin:1.5.0'
    classpath 'com.android.tools.build:gradle:3.4.1'
    classpath 'gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.8'
  }
}

subprojects {
  group = GROUP
  version = VERSION_NAME

  repositories {
    mavenCentral()
    google()
    jcenter {
      // Required for a dependency of Android lint.
      content {
        includeGroup 'org.jetbrains.trove4j'
      }
    }
  }

  tasks.withType(Test).configureEach {
    testLogging {
      events "skipped", "failed", "passed"
    }
  }

  if (project == project(':integration-tests:upstream')) {
    return
  }

  apply plugin: 'net.ltgt.errorprone'
  apply plugin: 'net.ltgt.nullaway'

  dependencies {
    errorproneJavac 'com.google.errorprone:javac:9+181-r4173-1'
    errorprone 'com.google.errorprone:error_prone_core:2.3.3'
    errorprone 'com.uber.nullaway:nullaway:0.7.3'
  }

  tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    options.errorprone {
      disableWarningsInGeneratedCode = true
      excludedPaths = ".*/build/generated/.*"

      check('MissingFail', CheckSeverity.ERROR)
      check('MissingOverride', CheckSeverity.ERROR)
      check('UnusedException', CheckSeverity.ERROR)
      check('UnusedMethod', CheckSeverity.ERROR)
      check('UnusedNestedClass', CheckSeverity.ERROR)
      check('UnusedVariable', CheckSeverity.ERROR)

      nullaway {
        annotatedPackages.add('dagger.reflect')
        severity = CheckSeverity.ERROR
        assertsEnabled = true
      }
    }
  }

  plugins.withId('java-library') {
    project.apply plugin: 'com.github.sherter.google-java-format'

    googleJavaFormat {
      toolVersion = '1.7'

      // By default, the GJF plugin includes all Java folders inside the project directory. This
      // does not work well with nested projects, especially when you want to exclude them.
      source = sourceSets*.allJava
    }

    afterEvaluate {
      def verify = tasks.getByName('verifyGoogleJavaFormat')
      tasks.getByName('check').dependsOn(verify)
      def prompt = tasks.create('promptGoogleJavaFormat') {
        doLast {
          println()
          println('To automatically format, run "./gradlew googleJavaFormat"')
          println()
        }
        onlyIf { verify.state.failure != null }
      }
      verify.finalizedBy(prompt)
    }
  }
}
